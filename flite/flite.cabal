Name:               flite
Version:            0.6.1
Synopsis:           f-lite compiler and interpreter
License:            BSD3
License-file:       LICENSE
Author:             Matthew Naylor
Maintainer:         Jason Reich <jason@cs.york.ac.uk>, Matthew Naylor <mfn@cs.york.ac.uk>
Stability:          provisional
Homepage:           http://www.cs.york.ac.uk/fp/reduceron/
Build-Type:         Simple
Cabal-Version:      >=1.8
Description:        The f-lite language is a subset of Haskell 98 and Clean consisting of function
                    definitions, pattern matching, limited let expressions, function applications and
                    constructor applications expressed in the explicit 'braces' layout-insensitive format.

                    'flite' uses Parsec. It supports some lambda expressions, infix usage of
                    binary primitive operators and infix application of other functions using backticks.
                    Information is returned about syntax errors.

                    See README for more information. Example flite programs included in source distribution.
Category:           Compiler
Extra-Source-Files: README examples/*.hs

Executable flite
    Main-is:       fl-parsec.hs
    Build-Depends: base >= 3 && < 5,
                   array >= 0 && < 1, containers >= 0 && < 1,
                   parsec >= 3
    Other-Modules:  Flite.CallGraph, Flite.Case, Flite.Compile, Flite.CompileBackend
                    Flite.CompileFrontend, Flite.ConcatApp, Flite.Descend, Flite.Flatten,
                    Flite.Fresh, Flite.Identify, Flite.Identity, Flite.Inline, Flite.Interp,
                    Flite.InterpFrontend, Flite.LambdaLift, Flite.Let, Flite.Matching,
                    Flite.Predex, Flite.Pretty, Flite.RedCompile, Flite.RedFrontend,
                    Flite.RedSyntax, Flite.State, Flite.Strictify, Flite.Syntax,
                    Flite.Traversals, Flite.Writer, Flite.WriterState,
                    Flite.Parsec.Parse, Flite.Parsec.Flite, Flite.Parsec.Prelude,
                    Flite.Dependency, Flite.IntInfer, Flite.Strictness, Flite.WorkerWrapper,
                    Paths_flite
